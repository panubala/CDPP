Debug information for file: javali_tests/HW4/OkVirtualMethod.javali
AST Resulting From Parsing Stage:
ClassDecl (name: A, superClass: Object)
| MethodDecl (argumentNames: [], argumentTypes: [], name: override, returnType: void)
| | Seq ()
| | Seq ()
| | | BuiltInWrite ()
| | | | IntConst (value: 0)
| | | BuiltInWriteln ()
| MethodDecl (argumentNames: [], argumentTypes: [], name: base, returnType: void)
| | Seq ()
| | Seq ()
| | | BuiltInWrite ()
| | | | IntConst (value: 1)
| | | BuiltInWriteln ()
ClassDecl (name: B, superClass: A)
| MethodDecl (argumentNames: [], argumentTypes: [], name: override, returnType: void)
| | Seq ()
| | Seq ()
| | | BuiltInWrite ()
| | | | IntConst (value: 2)
| | | BuiltInWriteln ()
| MethodDecl (argumentNames: [], argumentTypes: [], name: sub, returnType: void)
| | Seq ()
| | Seq ()
| | | BuiltInWrite ()
| | | | IntConst (value: 3)
| | | BuiltInWriteln ()
ClassDecl (name: Main, superClass: Object)
| MethodDecl (argumentNames: [], argumentTypes: [], name: main, returnType: void)
| | Seq ()
| | | VarDecl (name: a, type: A)
| | | VarDecl (name: b, type: B)
| | Seq ()
| | | Assign ()
| | | | Var (name: a)
| | | | NullConst ()
| | | Assign ()
| | | | Var (name: b)
| | | | NullConst ()
| | | Assign ()
| | | | Var (name: a)
| | | | NewObject (typeName: A)
| | | MethodCall ()
| | | | MethodCallExpr (methodName: base)
| | | | | Var (name: a)
| | | MethodCall ()
| | | | MethodCallExpr (methodName: override)
| | | | | Var (name: a)
| | | Assign ()
| | | | Var (name: b)
| | | | NewObject (typeName: B)
| | | MethodCall ()
| | | | MethodCallExpr (methodName: base)
| | | | | Var (name: b)
| | | MethodCall ()
| | | | MethodCallExpr (methodName: override)
| | | | | Var (name: b)
| | | MethodCall ()
| | | | MethodCallExpr (methodName: sub)
| | | | | Var (name: b)
| | | Assign ()
| | | | Var (name: a)
| | | | Var (name: b)
| | | MethodCall ()
| | | | MethodCallExpr (methodName: base)
| | | | | Var (name: a)
| | | MethodCall ()
| | | | MethodCallExpr (methodName: override)
| | | | | Var (name: a)
| | | MethodCall ()
| | | | MethodCallExpr (methodName: base)
| | | | | Var (name: b)
| | | MethodCall ()
| | | | MethodCallExpr (methodName: override)
| | | | | Var (name: b)
| | | MethodCall ()
| | | | MethodCallExpr (methodName: sub)
| | | | | Var (name: b)

Phase cfg failed because we expected to see:
digraph G {
  graph [ rankdir = "LR" ];
  subgraph cluster_0 {
    label = "A.override"
    M0_BB0 [
      shape="record"
      label="BB0|write(0)|writeln()"
    ];
    M0_BB0 -> M0_BB1;
    M0_BB1 [
      shape="record"
      label="BB1"
    ];
  }
  subgraph cluster_1 {
    label = "A.base"
    M1_BB0 [
      shape="record"
      label="BB0|write(1)|writeln()"
    ];
    M1_BB0 -> M1_BB1;
    M1_BB1 [
      shape="record"
      label="BB1"
    ];
  }
  subgraph cluster_2 {
    label = "B.override"
    M2_BB0 [
      shape="record"
      label="BB0|write(2)|writeln()"
    ];
    M2_BB0 -> M2_BB1;
    M2_BB1 [
      shape="record"
      label="BB1"
    ];
  }
  subgraph cluster_3 {
    label = "B.sub"
    M3_BB0 [
      shape="record"
      label="BB0|write(3)|writeln()"
    ];
    M3_BB0 -> M3_BB1;
    M3_BB1 [
      shape="record"
      label="BB1"
    ];
  }
  subgraph cluster_4 {
    label = "Main.main"
    M4_BB0 [
      shape="record"
      label="BB0|a = null|b = null|a = new A()|a.base(...)|a.override(...)|b = new B()|b.base(...)|b.override(...)|b.sub(...)|a = b|a.base(...)|a.override(...)|b.base(...)|b.override(...)|b.sub(...)"
    ];
    M4_BB0 -> M4_BB1;
    M4_BB1 [
      shape="record"
      label="BB1"
    ];
  }
}

But we actually saw:
digraph G {
  graph [ rankdir = "LR" ];
  subgraph cluster_0 {
    label = "A.override"
    M0_BB0 [
      shape="record"
      label="BB0"
    ];
    M0_BB1 [
      shape="record"
      label="BB1"
    ];
  }
  subgraph cluster_1 {
    label = "A.base"
    M1_BB0 [
      shape="record"
      label="BB0"
    ];
    M1_BB1 [
      shape="record"
      label="BB1"
    ];
  }
  subgraph cluster_2 {
    label = "B.override"
    M2_BB0 [
      shape="record"
      label="BB0"
    ];
    M2_BB1 [
      shape="record"
      label="BB1"
    ];
  }
  subgraph cluster_3 {
    label = "B.sub"
    M3_BB0 [
      shape="record"
      label="BB0"
    ];
    M3_BB1 [
      shape="record"
      label="BB1"
    ];
  }
  subgraph cluster_4 {
    label = "Main.main"
    M4_BB0 [
      shape="record"
      label="BB0"
    ];
    M4_BB1 [
      shape="record"
      label="BB1"
    ];
  }
}

The difference is:
At line   7 /   7:
<       label="BB0|write(0)|writeln()"
>       label="BB0"
At line   9 /   9:
<     M0_BB0 -> M0_BB1;
At line  19 /  18:
<       label="BB0|write(1)|writeln()"
>       label="BB0"
At line  21 /  20:
<     M1_BB0 -> M1_BB1;
At line  31 /  29:
<       label="BB0|write(2)|writeln()"
>       label="BB0"
At line  33 /  31:
<     M2_BB0 -> M2_BB1;
At line  43 /  40:
<       label="BB0|write(3)|writeln()"
>       label="BB0"
At line  45 /  42:
<     M3_BB0 -> M3_BB1;
At line  55 /  51:
<       label="BB0|a = null|b = null|a = new A()|a.base(...)|a.override(...)|b = new B()|b.base(...)|b.override(...)|b.sub(...)|a = b|a.base(...)|a.override(...)|b.base(...)|b.override(...)|b.sub(...)"
>       label="BB0"
At line  57 /  53:
<     M4_BB0 -> M4_BB1;
Line  64 /  59:

