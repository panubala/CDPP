Debug information for file: javali_tests/HW4/FibonacciRecursive.javali
AST Resulting From Parsing Stage:
ClassDecl (name: Main, superClass: Object)
| MethodDecl (argumentNames: [], argumentTypes: [], name: main, returnType: void)
| | Seq ()
| | | VarDecl (name: a, type: int)
| | Seq ()
| | | Assign ()
| | | | Var (name: a)
| | | | MethodCallExpr (methodName: fib)
| | | | | ThisRef ()
| | | | | IntConst (value: 20)
| | | BuiltInWrite ()
| | | | Var (name: a)
| | | BuiltInWriteln ()
| MethodDecl (argumentNames: [n], argumentTypes: [int], name: fib, returnType: int)
| | Seq ()
| | | VarDecl (name: fib, type: int)
| | | VarDecl (name: fib2, type: int)
| | Seq ()
| | | IfElse ()
| | | | BinaryOp (operator: B_LESS_OR_EQUAL)
| | | | | Var (name: n)
| | | | | IntConst (value: 1)
| | | | Seq ()
| | | | | Assign ()
| | | | | | Var (name: fib)
| | | | | | Var (name: n)
| | | | Seq ()
| | | | | Assign ()
| | | | | | Var (name: fib)
| | | | | | MethodCallExpr (methodName: fib)
| | | | | | | ThisRef ()
| | | | | | | BinaryOp (operator: B_MINUS)
| | | | | | | | Var (name: n)
| | | | | | | | IntConst (value: 1)
| | | | | Assign ()
| | | | | | Var (name: fib2)
| | | | | | MethodCallExpr (methodName: fib)
| | | | | | | ThisRef ()
| | | | | | | BinaryOp (operator: B_MINUS)
| | | | | | | | Var (name: n)
| | | | | | | | IntConst (value: 2)
| | | | | Assign ()
| | | | | | Var (name: fib)
| | | | | | BinaryOp (operator: B_PLUS)
| | | | | | | Var (name: fib)
| | | | | | | Var (name: fib2)
| | | ReturnStmt ()
| | | | Var (name: fib)

Phase cfg failed because we expected to see:
digraph G {
  graph [ rankdir = "LR" ];
  subgraph cluster_0 {
    label = "Main.main"
    M0_BB0 [
      shape="record"
      label="BB0|a = this.fib(...)|write(a)|writeln()"
    ];
    M0_BB0 -> M0_BB1;
    M0_BB1 [
      shape="record"
      label="BB1"
    ];
  }
  subgraph cluster_1 {
    label = "Main.fib"
    M1_BB0 [
      shape="record"
      label="BB0|If: (n \<= 1)"
    ];
    M1_BB0 -> M1_BB2;
    M1_BB0 -> M1_BB3 [label="False"];
    M1_BB1 [
      shape="record"
      label="BB1"
    ];
    M1_BB2 [
      shape="record"
      label="BB2|fib = n"
    ];
    M1_BB2 -> M1_BB4;
    M1_BB3 [
      shape="record"
      label="BB3|fib = this.fib(...)|fib2 = this.fib(...)|fib = (fib + fib2)"
    ];
    M1_BB3 -> M1_BB4;
    M1_BB4 [
      shape="record"
      label="BB4|return fib"
    ];
    M1_BB4 -> M1_BB1;
  }
}

But we actually saw:
digraph G {
  graph [ rankdir = "LR" ];
  subgraph cluster_0 {
    label = "Main.main"
    M0_BB0 [
      shape="record"
      label="BB0"
    ];
    M0_BB1 [
      shape="record"
      label="BB1"
    ];
  }
  subgraph cluster_1 {
    label = "Main.fib"
    M1_BB0 [
      shape="record"
      label="BB0"
    ];
    M1_BB1 [
      shape="record"
      label="BB1"
    ];
  }
}

The difference is:
At line   7 /   7:
<       label="BB0|a = this.fib(...)|write(a)|writeln()"
>       label="BB0"
At line   9 /   9:
<     M0_BB0 -> M0_BB1;
At line  19 /  18:
<       label="BB0|If: (n \<= 1)"
>       label="BB0"
At line  21 /  20:
<     M1_BB0 -> M1_BB2;
<     M1_BB0 -> M1_BB3 [label="False"];
At line  27 /  24:
<     M1_BB2 [
<       shape="record"
<       label="BB2|fib = n"
<     ];
<     M1_BB2 -> M1_BB4;
<     M1_BB3 [
<       shape="record"
<       label="BB3|fib = this.fib(...)|fib2 = this.fib(...)|fib = (fib + fib2)"
<     ];
<     M1_BB3 -> M1_BB4;
<     M1_BB4 [
<       shape="record"
<       label="BB4|return fib"
<     ];
<     M1_BB4 -> M1_BB1;
Line  44 /  26:

